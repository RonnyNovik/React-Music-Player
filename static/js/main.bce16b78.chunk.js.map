{"version":3,"sources":["containers/Player/Player.module.css","components/Button/Button.module.css","containers/Layout/Layout.module.css","components/ImageTile/ImageTile.module.css","components/Title/Title.js","components/Button/Button.js","components/ImageTile/ImageTile.js","components/ArtistName/ArtistName.js","components/DurationBar/DurationBar.js","components/ListItem/ListItem.js","containers/SongList/SongList.js","containers/Player/Player.js","containers/Layout/Layout.js","App.js","serviceWorker.js","index.js","components/ListItem/ListItem.module.css"],"names":["module","exports","TopBar","SongInfo","PlayerControls","PlayButton","activeButton","ui-icon","player-flow-control","ui-icon-toggled","iconToggled","player-switch-control","player-play-control","LayoutBlock","ImageTile","Title","props","react_default","a","createElement","Fragment","style","position","top","fontSize","children","Button","CSSTransition","in","isToggled","appear","timeout","classNames","ref","onClick","click","toggledType","className","concat","styles","type","icon","src","alt","ArtistName","DurationBar","margin","width","lib_default","audioRef","songURL","onCanPlay","initializeTime","onDragStart","playing","onDragIndicator","onAbort","console","log","audioComponent","audio","play","pause","onEnded","isShuffleOn","randomizeSong","onEnd","preload","ListItem","id","songIndex","ListItemContainer","ListItemImg","songIMG","TextContainer","artistName","SongName","songName","SongList","marginTop","TransitionGroup","songArray","map","song","index","isOpen","components_ListItem_ListItem","key","transitionDelay","Player","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initializeSongLengthFunction","state","currentSong","duration","seconds","Math","floor","minutes","songLength","innerHTML","togglePlayModeHandler","setState","playIsToggled","toggleMuteHandler","muteIsToggled","muted","backwardSongHandler","currentSongIndex","currentIndex","shuffleIsToggled","random","length","switchSongHandler","forwardSongHandler","repeatIsToggled","switchSongFromList","event","listIsToggled","currentTarget","togglePlayerOptions","modeToggled","React","createRef","currentTimeElement","document","getElementsByClassName","_this2","Axios","get","then","response","songs","data","catch","error","_this3","togglePlayIcon","playerTitle","components_Button_Button","components_Title_Title","containers_SongList_SongList","components_ImageTile_ImageTile","components_ArtistName_ArtistName","components_DurationBar_DurationBar","el","Component","Layout","containers_Player_Player","App","containers_Layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bce16b78.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TopBar\":\"Player_TopBar__2ZNOc\",\"SongInfo\":\"Player_SongInfo__3wZXA\",\"PlayerControls\":\"Player_PlayerControls__116KB\",\"PlayButton\":\"Player_PlayButton__1QmU9\",\"activeButton\":\"Player_activeButton__9_a8h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ui-icon\":\"Button_ui-icon__3RdDE\",\"player-flow-control\":\"Button_player-flow-control__2Y4SZ\",\"ui-icon-toggled\":\"Button_ui-icon-toggled__2TLqP\",\"iconToggled\":\"Button_iconToggled__1R2e_\",\"player-switch-control\":\"Button_player-switch-control__1x4fR\",\"player-play-control\":\"Button_player-play-control__2kjZj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LayoutBlock\":\"Layout_LayoutBlock__p4POB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageTile\":\"ImageTile_ImageTile__3MwQD\"};","import React from 'react';\r\n\r\nconst Title = (props) => {\r\n    return (\r\n        <>\r\n          <h1 style={{'position': 'relative', 'top': '1vh', 'fontSize': '1.2rem'}}>{props.children}</h1>   \r\n        </>\r\n    );\r\n};\r\n\r\nexport default Title;","import React from 'react';\r\nimport styles from './Button.module.css';\r\nimport { CSSTransition } from 'react-transition-group';\r\nconst Button = (props) => {\r\n    return (\r\n        <>\r\n        <CSSTransition\r\n                in={props.isToggled}\r\n                appear={true}\r\n                timeout={300}\r\n                classNames='fade'>\r\n        <button ref={props.ref} \r\n                 onClick={() => props.click(props.toggledType)} \r\n                 className={`${styles[props.type]}`}>\r\n                 <i className={`${props.icon} ${props.isToggled ? styles['ui-icon-toggled'] : ''}`}></i>\r\n                 {props.children}\r\n         </button>\r\n         </CSSTransition>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport styles from './ImageTile.module.css';\r\n\r\nconst ImageTile = (props) => {\r\n  return (\r\n    <div className={styles.ImageTile}>\r\n      <img src={props.src} alt={props.alt} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageTile;\r\n","import React from 'react';\r\nconst ArtistName = (props) => {\r\n    return (\r\n        <>\r\n          <p>{props.children}</p>  \r\n        </>\r\n    );\r\n};\r\n\r\nexport default ArtistName;","import React from 'react';\r\nimport H5AudioPlayer from 'react-h5-audio-player';\r\n\r\n\r\nconst DurationBar = (props) => {\r\n  return (\r\n    <div style={{'margin': '0 auto',\r\n                 'position': 'relative',\r\n                 'width': '98%'}}>\r\n                   {/* The core of this app that is responsible for playing the audio, calculating durations and calculating the indicators actions.\r\n                       For more info : https://github.com/lhz516/react-h5-audio-player */}\r\n             <H5AudioPlayer\r\n                     ref={props.audioRef}\r\n                     src={props.songURL}\r\n                     onCanPlay={() => {\r\n                       props.initializeTime();\r\n                     }}\r\n                     onDragStart={() =>{\r\n                       return props.playing ? null : props.onDragIndicator();            \r\n                     }}\r\n                     onAbort={() => {\r\n                       console.log(props.audioComponent.audio)\r\n                       \r\n                       return props.playing ? props.audioComponent.audio.play() : props.audioComponent.audio.pause();\r\n                     }}\r\n                     onEnded={() => {\r\n                       return props.isShuffleOn ? props.randomizeSong() : props.onEnd();\r\n                     }}\r\n                     preload='auto'\r\n                     />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DurationBar;","import React from 'react';\r\nimport styles from './ListItem.module.css';\r\nconst ListItem = (props) => {\r\n    return (\r\n        <div style={props.style} onClick={props.click} id={props.songIndex} className={styles.ListItemContainer}>\r\n          <img className={styles.ListItemImg} src={props.songIMG} alt='song cover'/>\r\n          <div className={styles.TextContainer}>\r\n          <p className={styles.ArtistName}>{props.artistName}</p>\r\n          <h1 className={styles.SongName}>{props.songName}</h1>\r\n          </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport ListItem from '../../components/ListItem/ListItem';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nconst SongList = (props) => {\r\n\r\n    return (\r\n       \r\n        <div style={{'marginTop': '2vh'}}>\r\n        <TransitionGroup appear={true}>\r\n          {props.songArray.map( (song, index) => {\r\n             return (\r\n                <CSSTransition\r\n                in={props.isOpen}\r\n                appear={true}\r\n                timeout={600}\r\n                classNames='fade'>\r\n                 <ListItem key={index}\r\n                  style={{'transitionDelay': `${ index * .05 }s` }}\r\n                  click={props.click} \r\n                  songName={song.songName} \r\n                  songIndex={index}  \r\n                  artistName={song.artistName} \r\n                  songIMG={song.songIMG}/>\r\n                </CSSTransition>\r\n              )   \r\n          })}\r\n          </TransitionGroup>\r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default SongList;","import React, { Component } from \"react\";\r\nimport styles from \"./Player.module.css\";\r\nimport Title from \"../../components/Title/Title\";\r\nimport Button from \"../../components/Button/Button\";\r\nimport ImageTile from \"../../components/ImageTile/ImageTile\";\r\nimport ArtistName from \"../../components/ArtistName/ArtistName\";\r\nimport DurationBar from \"../../components/DurationBar/DurationBar\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport Axios from \"axios\";\r\nimport SongList from \"../SongList/SongList\";\r\nclass Player extends Component {\r\n  //Initialize variables and state\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      songArray: null,\r\n      currentSong: {},\r\n      currentSongIndex: 0,\r\n      shuffleIsToggled: false,\r\n      repeatIsToggled: false,\r\n      muteIsToggled: false,\r\n      playIsToggled: false,\r\n      listIsToggled: false\r\n    };\r\n    this.audioComponent = React.createRef();\r\n    this.currentTimeElement = document.getElementsByClassName(\"current-time\");\r\n    this.songLength = document.getElementsByClassName(\"total-time\");\r\n  }\r\n  //Calculate the minutes and seconds using song duration, output a formatted duration into the .total-time element\r\n  initializeSongLengthFunction = () => {\r\n    if (this.state.currentSong.songURL) {\r\n      let duration = this.audioComponent.audio.duration;\r\n      const seconds = Math.floor(duration % 60);\r\n      const minutes = Math.floor((duration / 60) % 60);\r\n      return (this.songLength[0].innerHTML =\r\n        (minutes < 10 ? \"0\" + minutes : minutes) +\r\n        \":\" +\r\n        (seconds < 10 ? \"0\" + seconds : seconds));\r\n    }\r\n  };\r\n\r\n  //Initialize song length rendering and fetch songs information from firebase\r\n  componentDidMount() {\r\n    Axios.get(\"https://react-music-player-6bb10.firebaseio.com/Songs.json\")\r\n      .then(response => {\r\n        const songs = response.data;\r\n        //Assign the data that was fetched from the server and initialize the first song\r\n        this.setState({\r\n          songArray: songs,\r\n          currentSong: songs[this.state.currentSongIndex]\r\n        });\r\n        //Prevent audio from playing after load\r\n        this.audioComponent.audio.pause();\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n    //Calculate the length of the first song and display on load\r\n    this.initializeSongLengthFunction();\r\n  }\r\n  //Toggle the playing state on click and play/pause the audio\r\n  togglePlayModeHandler = () => {\r\n    this.setState({ playIsToggled: !this.state.playIsToggled });\r\n    this.state.playIsToggled\r\n      ? this.audioComponent.audio.pause()\r\n      : this.audioComponent.audio.play();\r\n  };\r\n  //Toggling audio mute according to muteIsToggled state\r\n  toggleMuteHandler = () => {\r\n    return this.state.muteIsToggled\r\n      ? (this.audioComponent.audio.muted = false)\r\n      : (this.audioComponent.audio.muted = true);\r\n  };\r\n  //Switch the song back\r\n  backwardSongHandler = () => {\r\n    //Checks if this is not the first song on the list\r\n    if (this.state.currentSongIndex > 0) {\r\n      let currentIndex = this.state.currentSongIndex;\r\n      //If shuffle is toggled, Randomize a song\r\n      if (this.state.shuffleIsToggled) {\r\n        currentIndex = Math.floor(Math.random() * this.state.songArray.length);\r\n      } else {\r\n        currentIndex--;\r\n      }\r\n      this.switchSongHandler(currentIndex);\r\n    }\r\n  };\r\n  //Switch the song forward\r\n  forwardSongHandler = () => {\r\n    //Checks if the current song is not the last song on the list\r\n    if (this.state.currentSongIndex <= this.state.songArray.length - 1) {\r\n      let currentIndex = this.state.currentSongIndex;\r\n      //Checks if shuffle is toggled and if so, randomizes a song index\r\n      if (this.state.shuffleIsToggled) {\r\n        currentIndex = Math.floor(Math.random() * this.state.songArray.length);\r\n      } //If this is the last song on the list and repeat is on, reset the current index\r\n      else if (\r\n        this.state.currentSongIndex === this.state.songArray.length - 1 &&\r\n        this.state.repeatIsToggled\r\n      ) {\r\n        currentIndex = 0;\r\n        //If it's not the last song, add one to the current index\r\n      } else if (\r\n        this.state.currentSongIndex <\r\n        this.state.songArray.length - 1\r\n      ) {\r\n        currentIndex++;\r\n      }\r\n      this.switchSongHandler(currentIndex);\r\n    }\r\n  };\r\n  //Universal function to switch the song via state and reassign the current song index\r\n  switchSongHandler = index => {\r\n    this.setState({\r\n      currentSongIndex: index,\r\n      currentSong: this.state.songArray[index]\r\n    });\r\n  };\r\n  //Upon a click on each of the list items, close the list and switch to the chosen song\r\n  switchSongFromList = event => {\r\n    this.setState({ listIsToggled: false });\r\n    this.switchSongHandler(event.currentTarget.id);\r\n  };\r\n  //Randomize song and switch, used to trigger shuffle on songs endings\r\n  randomizeSong = () => {\r\n    let currentIndex = Math.floor(Math.random() * this.state.songArray.length);\r\n    this.switchSongHandler(currentIndex);\r\n  };\r\n\r\n  //Accepts the mode of the clicked button, toggles it and invoking the necessary functions related to the mode\r\n  togglePlayerOptions = modeToggled => {\r\n    switch (modeToggled) {\r\n      case \"shuffle\":\r\n        return this.setState({\r\n          shuffleIsToggled: !this.state.shuffleIsToggled\r\n        });\r\n      case \"mute\":\r\n        this.setState({ muteIsToggled: !this.state.muteIsToggled });\r\n        return this.toggleMuteHandler();\r\n      case \"list\":\r\n        return this.setState({\r\n          listIsToggled: !this.state.listIsToggled,\r\n          playIsToggled: false\r\n        });\r\n      case \"repeat\":\r\n        return this.setState({ repeatIsToggled: !this.state.repeatIsToggled });\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  render() {\r\n    let togglePlayIcon = this.state.playIsToggled\r\n      ? \"fas fa-pause fa-2x\"\r\n      : \"fas fa-play fa-2x\";\r\n    let playerTitle = this.state.listIsToggled\r\n      ? \"Choose A Song\"\r\n      : \"Now Playing\";\r\n    if (this.state.currentSong.songURL) {\r\n      return (\r\n        <div style={{ width: \"93%\" }}>\r\n          <CSSTransition\r\n            in={true}\r\n            appear={true}\r\n            timeout={300}\r\n            classNames=\"fadeTopBar\"\r\n          >\r\n            <div className={styles.TopBar}>\r\n              {this.state.listIsToggled ? null : (\r\n                <Button\r\n                  isToggled={this.state.muteIsToggled}\r\n                  toggledType=\"mute\"\r\n                  click={modeToggled => this.togglePlayerOptions(modeToggled)}\r\n                  type=\"ui-icon\"\r\n                  icon=\"fas fa-volume-mute fa-2x\"\r\n                />\r\n              )}\r\n              <CSSTransition\r\n                in={this.state.listIsToggled}\r\n                timeout={300}\r\n                classNames=\"textMove\"\r\n              >\r\n                <Title>{playerTitle}</Title>\r\n              </CSSTransition>\r\n              <Button\r\n                isToggled={this.state.listIsToggled}\r\n                toggledType=\"list\"\r\n                click={modeToggled => this.togglePlayerOptions(modeToggled)}\r\n                type=\"ui-icon\"\r\n                icon=\"fas fa-list-ul fa-2x\"\r\n              />\r\n            </div>\r\n          </CSSTransition>\r\n          <>\r\n            {this.state.listIsToggled ? (\r\n              <SongList\r\n                click={event => this.switchSongFromList(event)}\r\n                songArray={this.state.songArray}\r\n                isOpen={this.state.listIsToggled}\r\n              />\r\n            ) : (\r\n              <>\r\n                <CSSTransition\r\n                  in={true}\r\n                  appear={true}\r\n                  timeout={300}\r\n                  classNames=\"fade\"\r\n                >\r\n                  <ImageTile\r\n                    src={this.state.currentSong.songIMG}\r\n                    alt=\"Song Cover\"\r\n                  />\r\n                </CSSTransition>\r\n\r\n                <CSSTransition\r\n                  in={true}\r\n                  appear={true}\r\n                  timeout={300}\r\n                  classNames=\"fadeTopBar\"\r\n                >\r\n                  <div style={{ transitionDelay: \"400ms\" }}>\r\n                    <div className={styles.SongInfo}>\r\n                      <div>\r\n                        <Title>{this.state.currentSong.songName}</Title>\r\n                        <ArtistName>\r\n                          {this.state.currentSong.artistName}\r\n                        </ArtistName>\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/*The duration bar holds inside the H5AudioComponent that is being used as the audio managing component.\r\n         This component is responsible for the audio playing, calculating and displaying durations and applying the seeking function according to the indicator*/}\r\n                    <DurationBar\r\n                      isShuffleOn={this.state.shuffleIsToggled}\r\n                      randomizeSong={this.randomizeSong}\r\n                      onEnd={this.forwardSongHandler}\r\n                      onDragIndicator={this.togglePlayModeHandler}\r\n                      audioComponent={this.audioComponent}\r\n                      initializeTime={this.initializeSongLengthFunction}\r\n                      audioRef={el => (this.audioComponent = el)}\r\n                      songURL={this.state.currentSong.songURL}\r\n                      playing={this.state.playIsToggled}\r\n                    />\r\n\r\n                    <div className={styles.PlayerControls}>\r\n                      <Button\r\n                        isToggled={this.state.shuffleIsToggled}\r\n                        toggledType=\"shuffle\"\r\n                        click={modeToggled =>\r\n                          this.togglePlayerOptions(modeToggled)\r\n                        }\r\n                        type=\"player-flow-control\"\r\n                        icon=\"fas fa-random\"\r\n                      />\r\n                      <Button\r\n                        click={this.backwardSongHandler}\r\n                        type=\"player-switch-control\"\r\n                        icon=\"fas fa-step-backward\"\r\n                      />\r\n                      <Button\r\n                        click={this.togglePlayModeHandler}\r\n                        type=\"player-play-control\"\r\n                        icon={togglePlayIcon}\r\n                      />\r\n                      <Button\r\n                        click={this.forwardSongHandler}\r\n                        type=\"player-switch-control\"\r\n                        icon=\"fas fa-step-forward\"\r\n                      />\r\n                      <Button\r\n                        isToggled={this.state.repeatIsToggled}\r\n                        toggledType=\"repeat\"\r\n                        click={modeToggled =>\r\n                          this.togglePlayerOptions(modeToggled)\r\n                        }\r\n                        type=\"player-flow-control\"\r\n                        icon=\"fas fa-redo\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </CSSTransition>\r\n              </>\r\n            )}\r\n          </>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div className=\"loader\">Loading...</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","import React, { Component } from 'react';\r\nimport styles from './Layout.module.css';\r\nimport Player from '../Player/Player';\r\nclass Layout extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.LayoutBlock}>\r\n                <Player />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout;","import React, { Component } from 'react';\nimport Layout from './containers/Layout/Layout';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Layout />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ListItemContainer\":\"ListItem_ListItemContainer__od5wq\",\"TextContainer\":\"ListItem_TextContainer__3qBts\",\"ListItemImg\":\"ListItem_ListItemImg__2qN9m\",\"ArtistName\":\"ListItem_ArtistName__1K-hq\",\"SongName\":\"ListItem_SongName__3du3b\"};"],"sourceRoot":""}